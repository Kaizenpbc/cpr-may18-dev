version: '3.8'

services:
  # Test Database
  postgres-test:
    image: postgres:15-alpine
    container_name: cpr-postgres-test
    environment:
      POSTGRES_DB: cpr_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test_password
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cpr_test"]
      timeout: 5s
      interval: 10s
      retries: 5
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - cpr-test-network

  # Test Redis
  redis-test:
    image: redis:7-alpine
    container_name: cpr-redis-test
    command: redis-server --appendonly yes
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      interval: 10s
      retries: 5
    volumes:
      - redis_test_data:/data
    networks:
      - cpr-test-network

  # Test Backend
  cpr-backend-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: cpr-backend-test
    environment:
      NODE_ENV: test
      DB_HOST: postgres-test
      DB_PORT: 5432
      DB_NAME: cpr_test
      DB_USER: postgres
      DB_PASSWORD: test_password
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      JWT_SECRET: test_jwt_secret_key
      SESSION_SECRET: test_session_secret
      DB_ENCRYPTION_KEY: test_encryption_key_32_characters
      LOG_LEVEL: error
      PORT: 3001
    ports:
      - "3002:3001"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/health"]
      timeout: 10s
      interval: 30s
      retries: 3
      start_period: 60s
    networks:
      - cpr-test-network
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs

  # Test Frontend (if needed)
  cpr-frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cpr-frontend-test
    environment:
      NODE_ENV: test
      VITE_API_URL: http://localhost:3002
    ports:
      - "5175:5173"
    depends_on:
      - cpr-backend-test
    networks:
      - cpr-test-network
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Test Nginx (if needed)
  nginx-test:
    image: nginx:alpine
    container_name: cpr-nginx-test
    ports:
      - "8080:80"
    volumes:
      - ./docker/nginx/nginx.test.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d/cpr-app.test.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - cpr-backend-test
      - cpr-frontend-test
    networks:
      - cpr-test-network

  # Test Prometheus (for monitoring tests)
  prometheus-test:
    image: prom/prometheus:latest
    container_name: cpr-prometheus-test
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=1h'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    volumes:
      - ./docker/prometheus/prometheus.test.yml:/etc/prometheus/prometheus.yml
      - prometheus_test_data:/prometheus
    networks:
      - cpr-test-network

  # Test Grafana (for monitoring tests)
  grafana-test:
    image: grafana/grafana:latest
    container_name: cpr-grafana-test
    environment:
      GF_SECURITY_ADMIN_PASSWORD: test_admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    ports:
      - "3001:3000"
    volumes:
      - grafana_test_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus-test
    networks:
      - cpr-test-network

networks:
  cpr-test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local
  prometheus_test_data:
    driver: local
  grafana_test_data:
    driver: local
