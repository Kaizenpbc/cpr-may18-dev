version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cpr-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: cpr_may18
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-gtacpr}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./docker/postgres/conf:/etc/postgresql
    ports:
      - "5432:5432"
    networks:
      - cpr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cpr_may18"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: cpr-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cpr-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # CPR Training System Backend
  cpr-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: cpr-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: cpr_may18
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-gtacpr}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here}
      DB_ENCRYPTION_KEY: ${DB_ENCRYPTION_KEY:-your_encryption_key_here}
      EMAIL_HOST: ${EMAIL_HOST:-}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER:-}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD:-}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ./logs:/app/logs
      - ./ssl:/app/ssl
      - ./backups:/app/backups
    ports:
      - "3001:3001"
    networks:
      - cpr-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cpr-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    networks:
      - cpr-network
    depends_on:
      - cpr-backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: cpr-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - cpr-network
    security_opt:
      - no-new-privileges:true

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: cpr-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - cpr-network
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true

  # Alertmanager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: cpr-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    volumes:
      - ./docker/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - cpr-network
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true

  # Node Exporter (System Metrics)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: cpr-node-exporter
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    ports:
      - "9100:9100"
    networks:
      - cpr-network
    security_opt:
      - no-new-privileges:true

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: cpr-postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:${DB_PASSWORD:-gtacpr}@postgres:5432/cpr_may18?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - cpr-network
    depends_on:
      - postgres
    security_opt:
      - no-new-privileges:true

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: cpr-redis-exporter
    restart: unless-stopped
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: "${REDIS_PASSWORD:-redis_password}"
    ports:
      - "9121:9121"
    networks:
      - cpr-network
    depends_on:
      - redis
    security_opt:
      - no-new-privileges:true

  # Nginx Exporter
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: cpr-nginx-exporter
    restart: unless-stopped
    command:
      - '-nginx.scrape-uri=http://nginx:80/nginx_status'
    ports:
      - "9113:9113"
    networks:
      - cpr-network
    depends_on:
      - nginx
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

networks:
  cpr-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16